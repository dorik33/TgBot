package bot

import (
	"fmt"
	"log"
	"strconv"
	"strings"

	"github.com/dorik33/TgBot/internal/database"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)


func (b *Bot) sendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	b.botAPI.Send(msg)
}

func (b *Bot) handlePrice(update tgbotapi.Update) {
	args := strings.TrimSpace(update.Message.CommandArguments())
	if args == "" {
		b.sendMessage(update.Message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: /price <–∏–º—è>")
		return
	}

	crypto, err := b.apiClient.GetInfo(args)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã: %v", err)
		b.sendMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üò¢")
		return
	}

	price := fmt.Sprintf("üí∞ –¶–µ–Ω–∞ %s: $%f", crypto.Symbol, crypto.PriceUSD)
	b.sendMessage(update.Message.Chat.ID, price)
}

func (b *Bot) handleSub(update tgbotapi.Update) {
	args := strings.TrimSpace(update.Message.CommandArguments())
	if args == "" {
		b.sendMessage(update.Message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: /sub <–∏–º—è>")
		return
	}

	crypto, err := b.apiClient.GetInfo(args)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		b.sendMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üò¢")
		return
	}

	if err = b.supbrepo.AddSubscription(update.Message.Chat.ID, args); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		b.sendMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üò¢")
		return
	}

	b.sendMessage(update.Message.Chat.ID, fmt.Sprintf("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ %s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", crypto.Name))
}

func (b *Bot) handleListSubs(update tgbotapi.Update) {
	subs, err := b.supbrepo.GetSubcriptions(update.Message.Chat.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: %v", err)
		b.sendMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ üò¢")
		return
	}

	response := parseSubs(subs)
	b.sendMessage(update.Message.Chat.ID, response)
}

func (b *Bot) handleDeleteSub(update tgbotapi.Update) {
	args := strings.TrimSpace(update.Message.CommandArguments())
	if args == "" {
		b.sendMessage(update.Message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω: /delete_sub <–∏–º—è>")
		return
	}

	if err := b.supbrepo.DeleteSubscription(update.Message.Chat.ID, args); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		b.sendMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üò¢")
		return
	}

	b.sendMessage(update.Message.Chat.ID, fmt.Sprintf("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ %s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", args))
}

func (b *Bot) HandleMyWallet(update tgbotapi.Update) {
	wallet, err := b.walletrepo.GetWallet(update.Message.Chat.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: %v", err)
		b.sendMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ üò¢")
		return
	}

	if len(wallet) == 0 {
		b.sendMessage(update.Message.Chat.ID, "–í–∞—à–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –ø—É—Å—Ç–æ.\n–î–æ–±–∞–≤—å—Ç–µ –∞–∫—Ç–∏–≤—ã —Å –ø–æ–º–æ—â—å—é /add_crypto")
		return
	}

	currentPrices := make(map[string]float64)
	for _, item := range wallet {
		if _, exists := currentPrices[item.Token]; !exists {
			crypto, err := b.apiClient.GetInfo(item.Token)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è %s: %v", item.Token, err)
				currentPrices[item.Token] = 0
			} else {
				currentPrices[item.Token] = crypto.PriceUSD
			}
		}
	}

	var totalBuyCost, totalCurrentValue float64
	var builder strings.Builder
	builder.WriteString("üí∞ *–í–∞—à–µ –∫—Ä–∏–ø—Ç–æ-–ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:*\n\n")

	for _, item := range wallet {
		currentPrice := currentPrices[item.Token]
		currentValue := item.Amount * currentPrice
		buyCost := item.Amount * item.Price
		profit := currentValue - buyCost
		profitPercent := 0.0
		if buyCost != 0 {
			profitPercent = (profit / buyCost) * 100
		}

		totalBuyCost += buyCost
		totalCurrentValue += currentValue

		// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
		profitIcon := "üìâ"
		if profit >= 0 {
			profitIcon = "üìà"
		}

		builder.WriteString(fmt.Sprintf(
			"üÜî *ID:* %d\n"+
				"ü™ô *–¢–æ–∫–µ–Ω:* %s\n"+
				"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:* %f\n"+
				"üí∞ *–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏:* $%f\n"+
				"üè∑Ô∏è *–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞:* $%f\n"+
				"%s *–ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫:* $%f (%f%%)\n\n",
			item.ID,
			item.Token,
			item.Amount,
			item.Price,
			currentPrice,
			profitIcon,
			profit,
			profitPercent,
		))
	}

	totalProfit := totalCurrentValue - totalBuyCost
	totalProfitPercent := 0.0
	if totalBuyCost != 0 {
		totalProfitPercent = (totalProfit / totalBuyCost) * 100
	}

	totalProfitIcon := "üìâ"
	if totalProfit >= 0 {
		totalProfitIcon = "üìà"
	}

	builder.WriteString("üíπ *–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n")
	builder.WriteString(fmt.Sprintf("üí∞ *–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏:* $%f\n", totalBuyCost))
	builder.WriteString(fmt.Sprintf("üè¶ *–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ:* $%f\n", totalCurrentValue))
	builder.WriteString(fmt.Sprintf("%s *–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫:* $%f (%f%%)\n",
		totalProfitIcon, totalProfit, totalProfitPercent))

	b.sendMessage(update.Message.Chat.ID, builder.String())
}

func (b *Bot) HandleAddCrypto(update tgbotapi.Update) {
	args := strings.TrimSpace(update.Message.CommandArguments())
	parts := strings.Split(args, " ")

	if len(parts) < 2 {
		b.sendMessage(update.Message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_crypto <—Ç–æ–∫–µ–Ω> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> [—Ü–µ–Ω–∞_–ø–æ–∫—É–ø–∫–∏]\n–ü—Ä–∏–º–µ—Ä—ã:\n/add_crypto BTC 0.5\n/add_crypto ETH 2 3500")
		return
	}

	token := strings.ToUpper(parts[0])
	amountStr := parts[1]

	// –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
	amount, err := strconv.ParseFloat(amountStr, 64)
	if err != nil || amount <= 0 {
		b.sendMessage(update.Message.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.\n–ü—Ä–∏–º–µ—Ä: 0.5 –∏–ª–∏ 2")
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏
	var buyPrice float64
	if len(parts) >= 3 {
		buyPrice, err = strconv.ParseFloat(parts[2], 64)
		if err != nil || buyPrice <= 0 {
			b.sendMessage(update.Message.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.\n–ü—Ä–∏–º–µ—Ä: 3500")
			return
		}
	} else {
		// –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é
		crypto, err := b.apiClient.GetInfo(token)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è %s: %v", token, err)
			b.sendMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–æ–∫–µ–Ω—É üò¢")
			return
		}
		buyPrice = crypto.PriceUSD
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
	portfolio := &database.Portfolio{
		UserID: update.Message.Chat.ID,
		Token:  token,
		Amount: amount,
		Price:  buyPrice,
	}

	if err := b.walletrepo.AddCrypto(portfolio); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: %v", err)
		b.sendMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ üò¢")
		return
	}

	response := fmt.Sprintf(
		"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n%s: %f –ø–æ —Ü–µ–Ω–µ $%f\n–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏: $%f",
		token,
		amount,
		buyPrice,
		amount*buyPrice,
	)
	b.sendMessage(update.Message.Chat.ID, response)
}

func (b *Bot) HandleDeleteCrypto(update tgbotapi.Update) {
	args := strings.TrimSpace(update.Message.CommandArguments())
	if args == "" {
		b.sendMessage(update.Message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏: /delete_crypto <ID>\nID –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ /my_wallet")
		return
	}

	id, err := strconv.Atoi(args)
	if err != nil {
		b.sendMessage(update.Message.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä.")
		return
	}

	if err := b.walletrepo.DeleteCrypto(id, update.Message.Chat.ID); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ: %v", err)
		b.sendMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ üò¢")
		return
	}

	b.sendMessage(update.Message.Chat.ID, "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
}
