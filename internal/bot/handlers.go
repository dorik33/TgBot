package bot

import (
	"fmt"
	"log"
	"strings"

	"github.com/dorik33/TgBot/internal/api"
	"github.com/dorik33/TgBot/internal/database"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
)

func StartMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç —è –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–º–∞–Ω–¥")
	bot.Send(msg)
}

func HelpMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update) {
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf(`–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏!
–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.
/price <–Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã> - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.
/sub <–Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã> - –ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.
/subs - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏.
/delete_sub <–Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã> - –ü–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω.`))
	bot.Send(msg)
}

func PriceMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update, apiClient *api.APIClient) {
	args := strings.TrimSpace(update.Message.CommandArguments())
	args = strings.ToLower(args)
	if args == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: /price <–∏–º—è>")
		bot.Send(msg)
		return
	}

	crypto, err := apiClient.GetInfo(args)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ü–µ–Ω—ã: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üò¢")
		bot.Send(msg)
		return
	}

	price := fmt.Sprintf("üí∞ –¶–µ–Ω–∞ %s (%s): $%f", crypto.ID, crypto.Symbol, parsePrice(crypto.PriceUSD))
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, price)
	bot.Send(msg)
}

func AddSubscriptionMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update, apiClient *api.APIClient, repo *database.SubscriptionRepository) {
	args := strings.TrimSpace(update.Message.CommandArguments())
	args = strings.ToLower(args)
	if args == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: /sub <–∏–º—è>")
		bot.Send(msg)
		return
	}
	crypto, err := apiClient.GetInfo(args)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üò¢")
		bot.Send(msg)
		return
	}
	price := fmt.Sprintf("üí∞ –¶–µ–Ω–∞ %s (%s): $%f", crypto.ID, crypto.Symbol, parsePrice(crypto.PriceUSD))
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, price)
	bot.Send(msg)

	if err = repo.AddSubscription(update.Message.Chat.ID, args); err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üò¢")
		bot.Send(msg)
		return
	}
	log.Printf("–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ user: %d, token: %s\n", update.Message.Chat.ID, args)
	msg = tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ %s —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", args))
	bot.Send(msg)
}

func GetSubcriptionsMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update, apiClient *api.APIClient, repo *database.SubscriptionRepository) {
	subs, err := repo.GetSubcriptions(update.Message.Chat.ID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–æ–∫: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Öüò¢")
		bot.Send(msg)
	}
	log.Printf("–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–µ–Ω—ã user: %d, \n", update.Message.Chat.ID)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, parseSubs(subs))
	bot.Send(msg)
}

func DeleteSubcriptionsMessage(bot *tgbotapi.BotAPI, update tgbotapi.Update, apiClient *api.APIClient, repo *database.SubscriptionRepository) {
	args := strings.TrimSpace(update.Message.CommandArguments())
	args = strings.ToLower(args)
	if args == "" {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: /price <–∏–º—è>")
		bot.Send(msg)
		return
	}

	err := repo.DeleteSubscription(update.Message.Chat.ID, args)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—Éüò¢")
		bot.Send(msg)
	}
	log.Printf("–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω—ã user: %d, \n", update.Message.Chat.ID)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ %s —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!", args))
	bot.Send(msg)
}
